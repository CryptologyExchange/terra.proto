# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/wasm/v1beta1/tx.proto, terra/wasm/v1beta1/wasm.proto, terra/wasm/v1beta1/query.proto, terra/wasm/v1beta1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

from .cosmos.base import v1beta1


@dataclass
class MsgStoreCode(betterproto.Message):
    """MsgStoreCode represents a message to submit Wasm code to the system"""

    # Sender is the that actor that signed the messages
    sender: str = betterproto.string_field(1)
    # WASMByteCode can be raw or gzip compressed
    wasm_byte_code: bytes = betterproto.bytes_field(2)


@dataclass
class MsgStoreCodeResponse(betterproto.Message):
    """MsgStoreCodeResponse defines the Msg/StoreCode response type."""

    # CodeID is the reference to the stored WASM code
    code_id: int = betterproto.uint64_field(1)


@dataclass
class MsgMigrateCode(betterproto.Message):
    """
    MsgMigrateCode represents a message to submit Wasm code to the system
    """

    # CodeID is the migration target code id
    code_id: int = betterproto.uint64_field(1)
    # Sender is the that actor that signed the messages
    sender: str = betterproto.string_field(2)
    # WASMByteCode can be raw or gzip compressed
    wasm_byte_code: bytes = betterproto.bytes_field(3)


@dataclass
class MsgMigrateCodeResponse(betterproto.Message):
    """MsgMigrateCodeResponse defines the Msg/MigrateCode response type."""

    pass


@dataclass
class MsgInstantiateContract(betterproto.Message):
    """
    MsgInstantiateContract represents a message to create a new smart contract
    instance for the given code id.
    """

    # Sender is an sender address
    sender: str = betterproto.string_field(1)
    # Admin is an optional admin address who can migrate the contract
    admin: str = betterproto.string_field(2)
    # CodeID is the reference to the stored WASM code
    code_id: int = betterproto.uint64_field(3)
    # InitMsg json encoded message to be passed to the contract on instantiation
    init_msg: bytes = betterproto.bytes_field(4)
    # InitCoins that are transferred to the contract on execution
    init_coins: List[v1beta1.Coin] = betterproto.message_field(5)


@dataclass
class MsgInstantiateContractResponse(betterproto.Message):
    """
    MsgInstantiateContractResponse defines the Msg/InstantiateContract response
    type.
    """

    # ContractAddress is the bech32 address of the new contract instance.
    contract_address: str = betterproto.string_field(1)
    # Data contains base64-encoded bytes to returned from the contract
    data: bytes = betterproto.bytes_field(2)


@dataclass
class MsgExecuteContract(betterproto.Message):
    """
    MsgExecuteContract represents a message to submits the given message data
    to a smart contract.
    """

    # Sender is the that actor that signed the messages
    sender: str = betterproto.string_field(1)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(2)
    # ExecuteMsg json encoded message to be passed to the contract
    execute_msg: bytes = betterproto.bytes_field(3)
    # Coins that are transferred to the contract on execution
    coins: List[v1beta1.Coin] = betterproto.message_field(5)


@dataclass
class MsgExecuteContractResponse(betterproto.Message):
    """
    MsgExecuteContractResponse defines the Msg/ExecuteContract response type.
    """

    # Data contains base64-encoded bytes to returned from the contract
    data: bytes = betterproto.bytes_field(1)


@dataclass
class MsgMigrateContract(betterproto.Message):
    """
    MsgMigrateContract represents a message to runs a code upgrade/ downgrade
    for a smart contract
    """

    # Admin is the current contract admin
    admin: str = betterproto.string_field(1)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(2)
    # NewCodeID references the new WASM code
    new_code_id: int = betterproto.uint64_field(3)
    # MigrateMsg is json encoded message to be passed to the contract on
    # migration
    migrate_msg: bytes = betterproto.bytes_field(4)


@dataclass
class MsgMigrateContractResponse(betterproto.Message):
    """
    MsgMigrateContractResponse defines the Msg/MigrateContract response type.
    """

    # Data contains base64-encoded bytes to returned from the contract
    data: bytes = betterproto.bytes_field(1)


@dataclass
class MsgUpdateContractAdmin(betterproto.Message):
    """
    MsgUpdateContractAdmin represents a message to sets a new admin for a smart
    contract
    """

    # Admin is the current contract admin
    admin: str = betterproto.string_field(1)
    # NewAdmin is the new contract admin
    new_admin: str = betterproto.string_field(2)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(3)


@dataclass
class MsgUpdateContractAdminResponse(betterproto.Message):
    """
    MsgUpdateContractAdminResponse defines the Msg/UpdateContractAdmin response
    type.
    """

    pass


@dataclass
class MsgClearContractAdmin(betterproto.Message):
    """
    MsgClearContractAdmin represents a message to clear admin address from a
    smart contract
    """

    # Admin is the current contract admin
    admin: str = betterproto.string_field(1)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(2)


@dataclass
class MsgClearContractAdminResponse(betterproto.Message):
    """
    MsgClearContractAdminResponse defines the Msg/ClearContractAdmin response
    type.
    """

    pass


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the wasm module."""

    max_contract_size: int = betterproto.uint64_field(1)
    max_contract_gas: int = betterproto.uint64_field(2)
    max_contract_msg_size: int = betterproto.uint64_field(3)


@dataclass
class CodeInfo(betterproto.Message):
    """CodeInfo is data for the uploaded contract WASM code"""

    # CodeID is the sequentially increasing unique identifier
    code_id: int = betterproto.uint64_field(1)
    # CodeHash is the unique identifier created by wasmvm
    code_hash: bytes = betterproto.bytes_field(2)
    # Creator address who initially stored the code
    creator: str = betterproto.string_field(3)


@dataclass
class ContractInfo(betterproto.Message):
    """ContractInfo stores a WASM contract instance"""

    # Address is the address of the contract
    address: str = betterproto.string_field(1)
    # Creator is the contract creator address
    creator: str = betterproto.string_field(2)
    # Admin is who can execute the contract migration
    admin: str = betterproto.string_field(3)
    # CodeID is the reference to the stored Wasm code
    code_id: int = betterproto.uint64_field(4)
    # InitMsg is the raw message used when instantiating a contract
    init_msg: bytes = betterproto.bytes_field(5)


@dataclass
class QueryCodeInfoRequest(betterproto.Message):
    """
    QueryCodeInfoRequest is the request type for the QueryyCodeInfo RPC method.
    """

    # grpc-gateway_out does not support Go style CodID
    code_id: int = betterproto.uint64_field(1)


@dataclass
class QueryCodeInfoResponse(betterproto.Message):
    """
    QueryCodeInfoResponse is response type for the QueryyCodeInfo RPC method.
    """

    code_info: "CodeInfo" = betterproto.message_field(1)


@dataclass
class QueryByteCodeRequest(betterproto.Message):
    """
    QueryByteCodeRequest is the request type for the QueryyByteCode RPC method.
    """

    # grpc-gateway_out does not support Go style CodID
    code_id: int = betterproto.uint64_field(1)


@dataclass
class QueryByteCodeResponse(betterproto.Message):
    """
    QueryByteCodeResponse is response type for the QueryyByteCode RPC method.
    """

    byte_code: bytes = betterproto.bytes_field(1)


@dataclass
class QueryContractInfoRequest(betterproto.Message):
    """
    QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
    method.
    """

    contract_address: str = betterproto.string_field(1)


@dataclass
class QueryContractInfoResponse(betterproto.Message):
    """
    QueryContractInfoResponse is response type for the Query/ContractInfo RPC
    method.
    """

    contract_info: "ContractInfo" = betterproto.message_field(1)


@dataclass
class QueryContractStoreRequest(betterproto.Message):
    """
    QueryContractStoreRequest is the request type for the Query/ContractStore
    RPC method.
    """

    contract_address: str = betterproto.string_field(1)
    query_msg: bytes = betterproto.bytes_field(2)


@dataclass
class QueryContractStoreResponse(betterproto.Message):
    """
    QueryContractStoreResponse is response type for the Query/ContractStore RPC
    method.
    """

    query_result: bytes = betterproto.bytes_field(1)


@dataclass
class QueryRawStoreRequest(betterproto.Message):
    """
    QueryRawStoreRequest is the request type for the Query/RawStore RPC method.
    """

    contract_address: str = betterproto.string_field(1)
    key: bytes = betterproto.bytes_field(2)


@dataclass
class QueryRawStoreResponse(betterproto.Message):
    """
    QueryRawStoreResponse is response type for the Query/RawStore RPC method.
    """

    # Data contains the raw store data
    data: bytes = betterproto.bytes_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    last_code_id: int = betterproto.uint64_field(2)
    last_instance_id: int = betterproto.uint64_field(3)
    codes: List["Code"] = betterproto.message_field(4)
    contracts: List["Contract"] = betterproto.message_field(5)


@dataclass
class Model(betterproto.Message):
    """Model is a struct that holds a KV pair"""

    key: bytes = betterproto.bytes_field(1)
    value: bytes = betterproto.bytes_field(2)


@dataclass
class Code(betterproto.Message):
    """Code struct encompasses CodeInfo and CodeBytes"""

    code_info: "CodeInfo" = betterproto.message_field(1)
    code_bytes: bytes = betterproto.bytes_field(2)


@dataclass
class Contract(betterproto.Message):
    """
    Contract struct encompasses ContractAddress, ContractInfo, and
    ContractState
    """

    contract_info: "ContractInfo" = betterproto.message_field(1)
    contract_store: List["Model"] = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the oracle Msg service."""

    async def store_code(
        self, *, sender: str = "", wasm_byte_code: bytes = b""
    ) -> MsgStoreCodeResponse:
        """StoreCode to submit Wasm code to the system"""

        request = MsgStoreCode()
        request.sender = sender
        request.wasm_byte_code = wasm_byte_code

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/StoreCode",
            request,
            MsgStoreCodeResponse,
        )

    async def migrate_code(
        self, *, code_id: int = 0, sender: str = "", wasm_byte_code: bytes = b""
    ) -> MsgMigrateCodeResponse:
        """MigrateCode to submit new version Wasm code to the system"""

        request = MsgMigrateCode()
        request.code_id = code_id
        request.sender = sender
        request.wasm_byte_code = wasm_byte_code

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/MigrateCode",
            request,
            MsgMigrateCodeResponse,
        )

    async def instantiate_contract(
        self,
        *,
        sender: str = "",
        admin: str = "",
        code_id: int = 0,
        init_msg: bytes = b"",
        init_coins: List[v1beta1.Coin] = [],
    ) -> MsgInstantiateContractResponse:
        """
        Instantiate creates a new smart contract instance for the given code
        id.
        """

        request = MsgInstantiateContract()
        request.sender = sender
        request.admin = admin
        request.code_id = code_id
        request.init_msg = init_msg
        if init_coins is not None:
            request.init_coins = init_coins

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/InstantiateContract",
            request,
            MsgInstantiateContractResponse,
        )

    async def execute_contract(
        self,
        *,
        sender: str = "",
        contract: str = "",
        execute_msg: bytes = b"",
        coins: List[v1beta1.Coin] = [],
    ) -> MsgExecuteContractResponse:
        """Execute submits the given message data to a smart contract"""

        request = MsgExecuteContract()
        request.sender = sender
        request.contract = contract
        request.execute_msg = execute_msg
        if coins is not None:
            request.coins = coins

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/ExecuteContract",
            request,
            MsgExecuteContractResponse,
        )

    async def migrate_contract(
        self,
        *,
        admin: str = "",
        contract: str = "",
        new_code_id: int = 0,
        migrate_msg: bytes = b"",
    ) -> MsgMigrateContractResponse:
        """Migrate runs a code upgrade/ downgrade for a smart contract"""

        request = MsgMigrateContract()
        request.admin = admin
        request.contract = contract
        request.new_code_id = new_code_id
        request.migrate_msg = migrate_msg

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/MigrateContract",
            request,
            MsgMigrateContractResponse,
        )

    async def update_contract_admin(
        self, *, admin: str = "", new_admin: str = "", contract: str = ""
    ) -> MsgUpdateContractAdminResponse:
        """UpdateContractAdmin sets a new admin for a smart contract"""

        request = MsgUpdateContractAdmin()
        request.admin = admin
        request.new_admin = new_admin
        request.contract = contract

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/UpdateContractAdmin",
            request,
            MsgUpdateContractAdminResponse,
        )

    async def clear_contract_admin(
        self, *, admin: str = "", contract: str = ""
    ) -> MsgClearContractAdminResponse:
        """ClearContractAdmin remove admin flag from a smart contract"""

        request = MsgClearContractAdmin()
        request.admin = admin
        request.contract = contract

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Msg/ClearContractAdmin",
            request,
            MsgClearContractAdminResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def code_info(self, *, code_id: int = 0) -> QueryCodeInfoResponse:
        """CodeInfo returns the stored code info"""

        request = QueryCodeInfoRequest()
        request.code_id = code_id

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/CodeInfo",
            request,
            QueryCodeInfoResponse,
        )

    async def byte_code(self, *, code_id: int = 0) -> QueryByteCodeResponse:
        """ByteCode returns the stored byte code"""

        request = QueryByteCodeRequest()
        request.code_id = code_id

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/ByteCode",
            request,
            QueryByteCodeResponse,
        )

    async def contract_info(
        self, *, contract_address: str = ""
    ) -> QueryContractInfoResponse:
        """ContractInfo returns the stored contract info"""

        request = QueryContractInfoRequest()
        request.contract_address = contract_address

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/ContractInfo",
            request,
            QueryContractInfoResponse,
        )

    async def contract_store(
        self, *, contract_address: str = "", query_msg: bytes = b""
    ) -> QueryContractStoreResponse:
        """ContractStore return smart query result from the contract"""

        request = QueryContractStoreRequest()
        request.contract_address = contract_address
        request.query_msg = query_msg

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/ContractStore",
            request,
            QueryContractStoreResponse,
        )

    async def raw_store(
        self, *, contract_address: str = "", key: bytes = b""
    ) -> QueryRawStoreResponse:
        """RawStore return single key from the raw store data of a contract"""

        request = QueryRawStoreRequest()
        request.contract_address = contract_address
        request.key = key

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/RawStore",
            request,
            QueryRawStoreResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/terra.wasm.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
