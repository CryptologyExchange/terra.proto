# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/treasury/v1beta1/treasury.proto, terra/treasury/v1beta1/query.proto, terra/treasury/v1beta1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib

from .cosmos.base import v1beta1


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the oracle module."""

    tax_policy: "PolicyConstraints" = betterproto.message_field(1)
    reward_policy: "PolicyConstraints" = betterproto.message_field(2)
    seigniorage_burden_target: str = betterproto.string_field(3)
    mining_increment: str = betterproto.string_field(4)
    window_short: int = betterproto.uint64_field(5)
    window_long: int = betterproto.uint64_field(6)
    window_probation: int = betterproto.uint64_field(7)


@dataclass
class PolicyConstraints(betterproto.Message):
    """
    PolicyConstraints - defines policy constraints can be applied in tax &
    reward policies
    """

    rate_min: str = betterproto.string_field(1)
    rate_max: str = betterproto.string_field(2)
    cap: v1beta1.Coin = betterproto.message_field(3)
    change_rate_max: str = betterproto.string_field(4)


@dataclass
class EpochTaxProceeds(betterproto.Message):
    """
    EpochTaxProceeds represents the tax amount collected at the current epoch
    """

    tax_proceeds: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class EpochInitialIssuance(betterproto.Message):
    """
    EpochInitialIssuance represents initial issuance of the currrent epoch
    """

    issuance: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QueryTaxRateRequest(betterproto.Message):
    """
    QueryTaxRateRequest is the request type for the Query/TaxRate RPC method.
    """

    pass


@dataclass
class QueryTaxRateResponse(betterproto.Message):
    """
    QueryTaxRateResponse is response type for the Query/TaxRate RPC method.
    """

    tax_rate: str = betterproto.string_field(1)


@dataclass
class QueryTaxCapRequest(betterproto.Message):
    """
    QueryTaxCapRequest is the request type for the Query/TaxCap RPC method.
    """

    # denom defines the denomination to query for.
    denom: str = betterproto.string_field(1)


@dataclass
class QueryTaxCapResponse(betterproto.Message):
    """
    QueryTaxCapResponse is response type for the Query/TaxCap RPC method.
    """

    tax_cap: str = betterproto.string_field(1)


@dataclass
class QueryTaxCapsRequest(betterproto.Message):
    """
    QueryTaxCapsRequest is the request type for the Query/TaxCaps RPC method.
    """

    pass


@dataclass
class QueryTaxCapsResponseItem(betterproto.Message):
    """
    QueryTaxCapsResponseItem is response item type for the Query/TaxCaps RPC
    method.
    """

    denom: str = betterproto.string_field(1)
    tax_cap: str = betterproto.string_field(2)


@dataclass
class QueryTaxCapsResponse(betterproto.Message):
    """
    QueryTaxCapsResponse is response type for the Query/TaxCaps RPC method.
    """

    tax_caps: List["QueryTaxCapsResponseItem"] = betterproto.message_field(1)


@dataclass
class QueryRewardWeightRequest(betterproto.Message):
    """
    QueryRewardWeightRequest is the request type for the Query/RewardWeight RPC
    method.
    """

    pass


@dataclass
class QueryRewardWeightResponse(betterproto.Message):
    """
    QueryRewardWeightResponse is response type for the Query/RewardWeight RPC
    method.
    """

    reward_weight: str = betterproto.string_field(1)


@dataclass
class QueryTaxProceedsRequest(betterproto.Message):
    """
    QueryTaxProceedsRequest is the request type for the Query/TaxProceeds RPC
    method.
    """

    pass


@dataclass
class QueryTaxProceedsResponse(betterproto.Message):
    """
    QueryTaxProceedsResponse is response type for the Query/TaxProceeds RPC
    method.
    """

    tax_proceeds: List[v1beta1.Coin] = betterproto.message_field(1)


@dataclass
class QuerySeigniorageProceedsRequest(betterproto.Message):
    """
    QuerySeigniorageProceedsRequest is the request type for the
    Query/SeigniorageProceeds RPC method.
    """

    pass


@dataclass
class QuerySeigniorageProceedsResponse(betterproto.Message):
    """
    QuerySeigniorageProceedsResponse is response type for the
    Query/SeigniorageProceeds RPC method.
    """

    seigniorage_proceeds: str = betterproto.string_field(1)


@dataclass
class QueryIndicatorsRequest(betterproto.Message):
    """
    QueryIndicatorsRequest is the request type for the Query/Indicators RPC
    method.
    """

    pass


@dataclass
class QueryIndicatorsResponse(betterproto.Message):
    """
    QueryIndicatorsResponse is response type for the Query/Indicators RPC
    method.
    """

    trl_year: str = betterproto.string_field(1)
    trl_month: str = betterproto.string_field(2)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    tax_rate: str = betterproto.string_field(2)
    reward_weight: str = betterproto.string_field(3)
    tax_caps: List["TaxCap"] = betterproto.message_field(4)
    tax_proceeds: List[v1beta1.Coin] = betterproto.message_field(5)
    epoch_initial_issuance: List[v1beta1.Coin] = betterproto.message_field(6)
    epoch_states: List["EpochState"] = betterproto.message_field(7)


@dataclass
class TaxCap(betterproto.Message):
    """TaxCap is the max tax amount can be charged for the given denom"""

    denom: str = betterproto.string_field(1)
    tax_cap: str = betterproto.string_field(2)


@dataclass
class EpochState(betterproto.Message):
    """EpochState is the record for each epoch state"""

    epoch: int = betterproto.uint64_field(1)
    tax_reward: str = betterproto.string_field(2)
    seigniorage_reward: str = betterproto.string_field(3)
    total_staked_luna: str = betterproto.string_field(4)


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def tax_rate(self) -> QueryTaxRateResponse:
        """TaxRate return the current tax rate"""

        request = QueryTaxRateRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxRate",
            request,
            QueryTaxRateResponse,
        )

    async def tax_cap(self, *, denom: str = "") -> QueryTaxCapResponse:
        """TaxCap returns the tax cap of a denom"""

        request = QueryTaxCapRequest()
        request.denom = denom

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxCap",
            request,
            QueryTaxCapResponse,
        )

    async def tax_caps(self) -> QueryTaxCapsResponse:
        """TaxCaps returns the all tax caps"""

        request = QueryTaxCapsRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxCaps",
            request,
            QueryTaxCapsResponse,
        )

    async def reward_weight(self) -> QueryRewardWeightResponse:
        """RewardWeight return the current reward weight"""

        request = QueryRewardWeightRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/RewardWeight",
            request,
            QueryRewardWeightResponse,
        )

    async def seigniorage_proceeds(self) -> QuerySeigniorageProceedsResponse:
        """SeigniorageProceeds return the current seigniorage proceeds"""

        request = QuerySeigniorageProceedsRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/SeigniorageProceeds",
            request,
            QuerySeigniorageProceedsResponse,
        )

    async def tax_proceeds(self) -> QueryTaxProceedsResponse:
        """TaxProceeds return the current tax proceeds"""

        request = QueryTaxProceedsRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/TaxProceeds",
            request,
            QueryTaxProceedsResponse,
        )

    async def indicators(self) -> QueryIndicatorsResponse:
        """Indicators return the current trl informations"""

        request = QueryIndicatorsRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/Indicators",
            request,
            QueryIndicatorsResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/terra.treasury.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
