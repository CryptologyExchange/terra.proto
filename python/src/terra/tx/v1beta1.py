# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/tx/v1beta1/service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1
from .cosmos.tx import v1beta1


@dataclass
class ComputeTaxRequest(betterproto.Message):
    """
    ComputeTaxRequest is the request type for the Service.ComputeTax RPC
    method.
    """

    # tx is the transaction to simulate.
    tx: v1beta1.Tx = betterproto.message_field(1)


@dataclass
class ComputeTaxResponse(betterproto.Message):
    """
    ComputeTaxResponse is the response type for the Service.ComputeTax RPC
    method.
    """

    # amount is the amount of coins to be paid as a fee
    tax_amount: List[v1beta1.Coin] = betterproto.message_field(1)


class ServiceStub(betterproto.ServiceStub):
    """Service defines a gRPC service for interacting with transactions."""

    async def compute_tax(
        self, *, tx: Optional[v1beta1.Tx] = None
    ) -> ComputeTaxResponse:
        """
        EstimateFee simulates executing a transaction for estimating gas usage.
        """

        request = ComputeTaxRequest()
        if tx is not None:
            request.tx = tx

        return await self._unary_unary(
            "/terra.tx.v1beta1.Service/ComputeTax",
            request,
            ComputeTaxResponse,
        )
