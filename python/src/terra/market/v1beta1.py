# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: terra/market/v1beta1/tx.proto, terra/market/v1beta1/market.proto, terra/market/v1beta1/query.proto, terra/market/v1beta1/genesis.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
import grpclib

from .cosmos.base import v1beta1


@dataclass
class MsgSwap(betterproto.Message):
    """MsgSwap represents a message to swap coin to another denom."""

    trader: str = betterproto.string_field(1)
    offer_coin: v1beta1.Coin = betterproto.message_field(2)
    ask_denom: str = betterproto.string_field(3)


@dataclass
class MsgSwapResponse(betterproto.Message):
    """MsgSwapResponse defines the Msg/Swap response type."""

    swap_coin: v1beta1.Coin = betterproto.message_field(1)
    swap_fee: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class MsgSwapSend(betterproto.Message):
    """
    MsgSwapSend represents a message to swap coin and send all result coin to
    recipient
    """

    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    offer_coin: v1beta1.Coin = betterproto.message_field(3)
    ask_denom: str = betterproto.string_field(4)


@dataclass
class MsgSwapSendResponse(betterproto.Message):
    """MsgSwapSendResponse defines the Msg/SwapSend response type."""

    swap_coin: v1beta1.Coin = betterproto.message_field(1)
    swap_fee: v1beta1.Coin = betterproto.message_field(2)


@dataclass
class Params(betterproto.Message):
    """Params defines the parameters for the market module."""

    base_pool: bytes = betterproto.bytes_field(1)
    pool_recovery_period: int = betterproto.uint64_field(2)
    min_stability_spread: bytes = betterproto.bytes_field(3)


@dataclass
class QuerySwapRequest(betterproto.Message):
    """QuerySwapRequest is the request type for the Query/Swap RPC method."""

    # offer_coin defines the coin being offered (i.e. 1000000uluna)
    offer_coin: str = betterproto.string_field(1)
    # ask_denom defines the denom of the coin to swap to
    ask_denom: str = betterproto.string_field(2)


@dataclass
class QuerySwapResponse(betterproto.Message):
    """
    QuerySwapResponse is the response type for the Query/Swap RPC method.
    """

    # return_coin defines the coin returned as a result of the swap simulation.
    return_coin: v1beta1.Coin = betterproto.message_field(1)


@dataclass
class QueryTerraPoolDeltaRequest(betterproto.Message):
    """
    QueryTerraPoolDeltaRequest is the request type for the Query/TerraPoolDelta
    RPC method.
    """

    pass


@dataclass
class QueryTerraPoolDeltaResponse(betterproto.Message):
    """
    QueryTerraPoolDeltaResponse is the response type for the
    Query/TerraPoolDelta RPC method.
    """

    # terra_pool_delta defines the gap between the TerraPool and the
    # TerraBasePool
    terra_pool_delta: bytes = betterproto.bytes_field(1)


@dataclass
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    # params defines the parameters of the module.
    params: "Params" = betterproto.message_field(1)


@dataclass
class GenesisState(betterproto.Message):
    """GenesisState defines the market module's genesis state."""

    # params defines all the paramaters of the module.
    params: "Params" = betterproto.message_field(1)
    # the gap between the TerraPool and the BasePool
    terra_pool_delta: bytes = betterproto.bytes_field(2)


class MsgStub(betterproto.ServiceStub):
    """Msg defines the market Msg service."""

    async def swap(
        self,
        *,
        trader: str = "",
        offer_coin: Optional[v1beta1.Coin] = None,
        ask_denom: str = "",
    ) -> MsgSwapResponse:
        """
        Swap defines a method for swapping coin from one denom to another
        denom.
        """

        request = MsgSwap()
        request.trader = trader
        if offer_coin is not None:
            request.offer_coin = offer_coin
        request.ask_denom = ask_denom

        return await self._unary_unary(
            "/terra.market.v1beta1.Msg/Swap",
            request,
            MsgSwapResponse,
        )

    async def swap_send(
        self,
        *,
        from_address: str = "",
        to_address: str = "",
        offer_coin: Optional[v1beta1.Coin] = None,
        ask_denom: str = "",
    ) -> MsgSwapSendResponse:
        """
        SwapSend defines a method for swapping and sending coin from a account
        to other account.
        """

        request = MsgSwapSend()
        request.from_address = from_address
        request.to_address = to_address
        if offer_coin is not None:
            request.offer_coin = offer_coin
        request.ask_denom = ask_denom

        return await self._unary_unary(
            "/terra.market.v1beta1.Msg/SwapSend",
            request,
            MsgSwapSendResponse,
        )


class QueryStub(betterproto.ServiceStub):
    """Query defines the gRPC querier service."""

    async def swap(
        self, *, offer_coin: str = "", ask_denom: str = ""
    ) -> QuerySwapResponse:
        """Swap returns simulated swap amount."""

        request = QuerySwapRequest()
        request.offer_coin = offer_coin
        request.ask_denom = ask_denom

        return await self._unary_unary(
            "/terra.market.v1beta1.Query/Swap",
            request,
            QuerySwapResponse,
        )

    async def terra_pool_delta(self) -> QueryTerraPoolDeltaResponse:
        """TerraPoolDelta returns terra_pool_delta amount."""

        request = QueryTerraPoolDeltaRequest()

        return await self._unary_unary(
            "/terra.market.v1beta1.Query/TerraPoolDelta",
            request,
            QueryTerraPoolDeltaResponse,
        )

    async def params(self) -> QueryParamsResponse:
        """Params queries all parameters."""

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/terra.market.v1beta1.Query/Params",
            request,
            QueryParamsResponse,
        )
