// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/vesting/v1beta1/vesting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct LazyGradedVestingAccount {
    // message fields
    pub base_vesting_account: ::protobuf::SingularPtrField<super::vesting::BaseVestingAccount>,
    pub vesting_schedules: ::protobuf::RepeatedField<VestingSchedule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LazyGradedVestingAccount {
    fn default() -> &'a LazyGradedVestingAccount {
        <LazyGradedVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl LazyGradedVestingAccount {
    pub fn new() -> LazyGradedVestingAccount {
        ::std::default::Default::default()
    }

    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;


    pub fn get_base_vesting_account(&self) -> &super::vesting::BaseVestingAccount {
        self.base_vesting_account.as_ref().unwrap_or_else(|| <super::vesting::BaseVestingAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_vesting_account(&mut self) {
        self.base_vesting_account.clear();
    }

    pub fn has_base_vesting_account(&self) -> bool {
        self.base_vesting_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_vesting_account(&mut self, v: super::vesting::BaseVestingAccount) {
        self.base_vesting_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_vesting_account(&mut self) -> &mut super::vesting::BaseVestingAccount {
        if self.base_vesting_account.is_none() {
            self.base_vesting_account.set_default();
        }
        self.base_vesting_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_vesting_account(&mut self) -> super::vesting::BaseVestingAccount {
        self.base_vesting_account.take().unwrap_or_else(|| super::vesting::BaseVestingAccount::new())
    }

    // repeated .terra.vesting.v1beta1.VestingSchedule vesting_schedules = 2;


    pub fn get_vesting_schedules(&self) -> &[VestingSchedule] {
        &self.vesting_schedules
    }
    pub fn clear_vesting_schedules(&mut self) {
        self.vesting_schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_vesting_schedules(&mut self, v: ::protobuf::RepeatedField<VestingSchedule>) {
        self.vesting_schedules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vesting_schedules(&mut self) -> &mut ::protobuf::RepeatedField<VestingSchedule> {
        &mut self.vesting_schedules
    }

    // Take field
    pub fn take_vesting_schedules(&mut self) -> ::protobuf::RepeatedField<VestingSchedule> {
        ::std::mem::replace(&mut self.vesting_schedules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LazyGradedVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_vesting_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vesting_schedules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_vesting_account)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vesting_schedules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.vesting_schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.vesting_schedules {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LazyGradedVestingAccount {
        LazyGradedVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::vesting::BaseVestingAccount>>(
                "base_vesting_account",
                |m: &LazyGradedVestingAccount| { &m.base_vesting_account },
                |m: &mut LazyGradedVestingAccount| { &mut m.base_vesting_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VestingSchedule>>(
                "vesting_schedules",
                |m: &LazyGradedVestingAccount| { &m.vesting_schedules },
                |m: &mut LazyGradedVestingAccount| { &mut m.vesting_schedules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LazyGradedVestingAccount>(
                "LazyGradedVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LazyGradedVestingAccount {
        static instance: ::protobuf::rt::LazyV2<LazyGradedVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LazyGradedVestingAccount::new)
    }
}

impl ::protobuf::Clear for LazyGradedVestingAccount {
    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.vesting_schedules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LazyGradedVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LazyGradedVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Schedule {
    // message fields
    pub start_time: i64,
    pub end_time: i64,
    pub ratio: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Schedule {
    fn default() -> &'a Schedule {
        <Schedule as ::protobuf::Message>::default_instance()
    }
}

impl Schedule {
    pub fn new() -> Schedule {
        ::std::default::Default::default()
    }

    // int64 start_time = 1;


    pub fn get_start_time(&self) -> i64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: i64) {
        self.start_time = v;
    }

    // int64 end_time = 2;


    pub fn get_end_time(&self) -> i64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: i64) {
        self.end_time = v;
    }

    // string ratio = 3;


    pub fn get_ratio(&self) -> &str {
        &self.ratio
    }
    pub fn clear_ratio(&mut self) {
        self.ratio.clear();
    }

    // Param is passed by value, moved
    pub fn set_ratio(&mut self, v: ::std::string::String) {
        self.ratio = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ratio(&mut self) -> &mut ::std::string::String {
        &mut self.ratio
    }

    // Take field
    pub fn take_ratio(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ratio, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Schedule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end_time = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ratio)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ratio.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ratio);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.start_time != 0 {
            os.write_int64(1, self.start_time)?;
        }
        if self.end_time != 0 {
            os.write_int64(2, self.end_time)?;
        }
        if !self.ratio.is_empty() {
            os.write_string(3, &self.ratio)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Schedule {
        Schedule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_time",
                |m: &Schedule| { &m.start_time },
                |m: &mut Schedule| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end_time",
                |m: &Schedule| { &m.end_time },
                |m: &mut Schedule| { &mut m.end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ratio",
                |m: &Schedule| { &m.ratio },
                |m: &mut Schedule| { &mut m.ratio },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Schedule>(
                "Schedule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Schedule {
        static instance: ::protobuf::rt::LazyV2<Schedule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Schedule::new)
    }
}

impl ::protobuf::Clear for Schedule {
    fn clear(&mut self) {
        self.start_time = 0;
        self.end_time = 0;
        self.ratio.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Schedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schedule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VestingSchedule {
    // message fields
    pub denom: ::std::string::String,
    pub schedules: ::protobuf::RepeatedField<Schedule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VestingSchedule {
    fn default() -> &'a VestingSchedule {
        <VestingSchedule as ::protobuf::Message>::default_instance()
    }
}

impl VestingSchedule {
    pub fn new() -> VestingSchedule {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // repeated .terra.vesting.v1beta1.Schedule schedules = 2;


    pub fn get_schedules(&self) -> &[Schedule] {
        &self.schedules
    }
    pub fn clear_schedules(&mut self) {
        self.schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_schedules(&mut self, v: ::protobuf::RepeatedField<Schedule>) {
        self.schedules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schedules(&mut self) -> &mut ::protobuf::RepeatedField<Schedule> {
        &mut self.schedules
    }

    // Take field
    pub fn take_schedules(&mut self) -> ::protobuf::RepeatedField<Schedule> {
        ::std::mem::replace(&mut self.schedules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VestingSchedule {
    fn is_initialized(&self) -> bool {
        for v in &self.schedules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.schedules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        for value in &self.schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        for v in &self.schedules {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VestingSchedule {
        VestingSchedule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &VestingSchedule| { &m.denom },
                |m: &mut VestingSchedule| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Schedule>>(
                "schedules",
                |m: &VestingSchedule| { &m.schedules },
                |m: &mut VestingSchedule| { &mut m.schedules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VestingSchedule>(
                "VestingSchedule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VestingSchedule {
        static instance: ::protobuf::rt::LazyV2<VestingSchedule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VestingSchedule::new)
    }
}

impl ::protobuf::Clear for VestingSchedule {
    fn clear(&mut self) {
        self.denom.clear();
        self.schedules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VestingSchedule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VestingSchedule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#terra/vesting/v1beta1/vesting.proto\x12\x15terra.vesting.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a$cosmos/vesting/v1beta1/vesting.proto\"\x94\
    \x02\n\x18LazyGradedVestingAccount\x12b\n\x14base_vesting_account\x18\
    \x01\x20\x01(\x0b2*.cosmos.vesting.v1beta1.BaseVestingAccountR\x12baseVe\
    stingAccountB\x04\xd0\xde\x1f\x01\x12\x89\x01\n\x11vesting_schedules\x18\
    \x02\x20\x03(\x0b2&.terra.vesting.v1beta1.VestingScheduleR\x10vestingSch\
    edulesB4\xf2\xde\x1f\x18yaml:\"vesting_schedules\"\xaa\xdf\x1f\x10Vestin\
    gSchedules\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\"\xcc\x01\n\
    \x08Schedule\x124\n\nstart_time\x18\x01\x20\x01(\x03R\tstartTimeB\x15\
    \xf2\xde\x1f\x11yaml:\"start_time\"\x12.\n\x08end_time\x18\x02\x20\x01(\
    \x03R\x07endTimeB\x13\xf2\xde\x1f\x0fyaml:\"end_time\"\x12T\n\x05ratio\
    \x18\x03\x20\x01(\tR\x05ratioB>\xf2\xde\x1f\x0cyaml:\"ratio\"\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0:\x04\x88\xa0\
    \x1f\0\"\xaa\x01\n\x0fVestingSchedule\x12+\n\x05denom\x18\x01\x20\x01(\t\
    R\x05denomB\x15\xf2\xde\x1f\x11yaml:\"start_time\"\x12d\n\tschedules\x18\
    \x02\x20\x03(\x0b2\x1f.terra.vesting.v1beta1.ScheduleR\tschedulesB%\xf2\
    \xde\x1f\x10yaml:\"schedules\"\xaa\xdf\x1f\tSchedules\xc8\xde\x1f\0:\x04\
    \x88\xa0\x1f\0B-Z+github.com/terra-money/core/x/vesting/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
